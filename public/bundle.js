(()=>{"use strict";class t extends HTMLElement{constructor(){super()}connectedCallback(){const t=document.createElement("span");t.textContent=" (?)",this.appendChild(t),fetch("https://jsonplaceholder.typicode.com/posts/2").then((t=>t.json())).then((t=>console.log(t)))}}customElements.define("sh-tooltip",t);class e extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"});let t="100%";this.hasAttribute("width")&&(t=this.getAttribute("width")),this.shadowRoot.innerHTML=`\n        <style>\n            :host div{\n              margin: 0 auto;\n              max-width: ${t};\n            }\n\n            .card {\n                margin 1em;\n                background: white;\n                border-radius: 0.5em;\n                box-shadow: 0 2px 8px rgba(0,0,0,0.26);\n            }\n\n            .card__title{\n              font-weight: 500;\n              font-size: 1.5rem;\n              padding: 1em 1em 0 1em;\n            }\n\n            ::slotted(h2) {\n                font-size: 1.5rem;\n                font-weight: 500;\n                margin: 0;\n            }\n\n            .card__body {\n              padding: 0 2em 2em 2em;\n            }\n        </style>\n        <div class="card">\n            <header class="card__title">\n              <slot name="title"></slot>\n            </header>\n            <section class="card__body">\n              <slot></slot>\n            </section>\n        </div>\n      `}}customElements.define("ts-card",e);class n extends HTMLInputElement{constructor(){const t=super();console.log(t.value)}get value(){return this.getAttribute("value")}set value(t){t instanceof Date?this.value=t.toISOString().slice(0,"date"===this.type?10:-1):"boolean"!=typeof t?this.value=`${t}`:this.checked=t}}customElements.define("ts-input",n,{extends:"input"})})();